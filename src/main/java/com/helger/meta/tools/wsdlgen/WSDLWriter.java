/**
 * Copyright (C) 2014-2021 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.helger.meta.tools.wsdlgen;

import java.io.OutputStream;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Nonnull;

import com.helger.commons.ValueEnforcer;
import com.helger.commons.annotation.Nonempty;
import com.helger.meta.tools.wsdlgen.model.WGInterface;
import com.helger.meta.tools.wsdlgen.model.WGMethod;
import com.helger.meta.tools.wsdlgen.model.type.IWGType;
import com.helger.xml.microdom.IMicroDocument;
import com.helger.xml.microdom.IMicroElement;
import com.helger.xml.microdom.MicroComment;
import com.helger.xml.microdom.MicroDocument;
import com.helger.xml.microdom.serialize.MicroWriter;
import com.helger.xml.namespace.MapBasedNamespaceContext;
import com.helger.xml.serialize.write.XMLWriterSettings;

/**
 * The main WSDL writer class. It takes a {@link WGInterface} and creates a WSDL
 * file.
 *
 * @author Philip Helger
 */
public class WSDLWriter
{
  public static final String DEFAULT_ENDPOINT = "http://www.example.org/ws";
  public static final String WSDL_NS = "http://schemas.xmlsoap.org/wsdl/";
  public static final String SOAP_NS = "http://schemas.xmlsoap.org/wsdl/soap/";
  public static final String SOAP12_NS = "http://schemas.xmlsoap.org/wsdl/soap12/";
  public static final String WSA_NS = "http://www.w3.org/2007/05/addressing/metadata";

  public static final String PREFIX_WSDL = "wsdl";
  public static final String PREFIX_SOAP = "soap";
  public static final String PREFIX_SOAP12 = "soap12";
  public static final String PREFIX_TNS = XSDWriter.PREFIX_TNS;
  public static final String PREFIX_WSA = "wsa";

  private final WGInterface m_aInterface;
  private boolean m_bCreateDocumentation = true;
  private boolean m_bCreateWSAddressing = false;

  public WSDLWriter (@Nonnull final WGInterface aInterface)
  {
    m_aInterface = ValueEnforcer.notNull (aInterface, "Interface");
  }

  @Nonnull
  public WSDLWriter setCreateDocumentation (final boolean bCreateDocumentation)
  {
    m_bCreateDocumentation = bCreateDocumentation;
    return this;
  }

  @Nonnull
  public WSDLWriter setCreateWSAddressing (final boolean bCreateWSAddressing)
  {
    m_bCreateWSAddressing = bCreateWSAddressing;
    return this;
  }

  @Nonnull
  @Nonempty
  private static String _getTypeRef (@Nonnull final MapBasedNamespaceContext aNSC, @Nonnull final IWGType aType)
  {
    return aNSC.getPrefix (aType.getNamespace ()) + ":" + aType.getName ();
  }

  private static String _getFaultName (@Nonnull @Nonempty final String sMethodName, @Nonnull final String sLocalFaultName)
  {
    // JAXWS expects fault names to start with uppercase *sigh*
    String sRealMethodName = sMethodName;
    if (Character.isLowerCase (sMethodName.charAt (0)))
      sRealMethodName = sMethodName.substring (0, 1).toUpperCase (Locale.US) + sMethodName.substring (1);
    return sRealMethodName + "Fault" + sLocalFaultName;
  }

  public void generatedWSDL (@Nonnull final OutputStream aOS, @Nonnull final EStyle eStyle, @Nonnull final EUse eUse)
  {
    final MapBasedNamespaceContext aNSC = new MapBasedNamespaceContext ();
    aNSC.addMapping (PREFIX_WSDL, WSDL_NS);
    aNSC.addMapping (PREFIX_TNS, m_aInterface.getNamespace ());
    aNSC.addMapping (PREFIX_SOAP, SOAP_NS);
    if (m_bCreateWSAddressing)
      aNSC.addMapping (PREFIX_WSA, WSA_NS);

    final String sStyle = eStyle.getValue ();
    final String sUse = eUse.getValue ();
    final boolean bIsDocumentLiteral = eStyle == EStyle.DOCUMENT && eUse == EUse.LITERAL;

    final IMicroDocument aDoc = new MicroDocument ();
    aDoc.appendComment ("\nThis file was automatically generated by ph-wsdl-gen\n");
    final IMicroElement eDefinitions = aDoc.appendElement (WSDL_NS, "definitions");
    eDefinitions.setAttribute ("targetNamespace", m_aInterface.getNamespace ());
    eDefinitions.setAttribute ("name", m_aInterface.getName () + "Service");

    // Global documentation
    if (m_bCreateDocumentation && m_aInterface.hasDocumentation ())
      eDefinitions.appendElement (WSDL_NS, "documentation").appendText (m_aInterface.getDocumentation ());

    if (m_aInterface.hasTypes () || bIsDocumentLiteral)
    {
      final IMicroElement eTypes = eDefinitions.appendElement (WSDL_NS, "types");
      final IMicroElement eSchema = new XSDWriter (m_aInterface).setCreateDocumentation (m_bCreateDocumentation)
                                                                .setDocumentLiteral (bIsDocumentLiteral)
                                                                .getXSDSchemaElement (aNSC);
      eTypes.appendChild (eSchema);
    }

    // Create all messages
    {
      for (final WGMethod aMethod : m_aInterface.getAllMethods ())
      {
        final String sMethodName = aMethod.getName ();

        /*
         * Note: when using document/literal the 3 strings created for the
         * "element" attributes must match the names created in
         * XSDWriter._appendDocumentLiteralElements!!!
         */

        if (aMethod.isInput ())
        {
          final IMicroElement eMessage = eDefinitions.appendElement (WSDL_NS, "message");
          eMessage.setAttribute ("name", sMethodName + "Request");

          if (m_bCreateDocumentation)
            eMessage.appendElement (WSDL_NS, "documentation").appendText ("Input part for method " + sMethodName);

          for (final Map.Entry <String, IWGType> aEntry : aMethod.getAllInputs ().entrySet ())
          {
            final IWGType aType = aEntry.getValue ();
            final IMicroElement ePart = eMessage.appendElement (WSDL_NS, "part");
            ePart.setAttribute ("name", aEntry.getKey ());

            if (bIsDocumentLiteral)
              ePart.setAttribute ("element",
                                  PREFIX_TNS + ":" + XSDWriter.getElementName (sMethodName, aEntry.getKey (), EElementType.INPUT));
            else
              ePart.setAttribute ("type", _getTypeRef (aNSC, aType));
          }
        }

        if (aMethod.isOutput ())
        {
          final IMicroElement eMessage = eDefinitions.appendElement (WSDL_NS, "message");
          eMessage.setAttribute ("name", sMethodName + "Response");

          if (m_bCreateDocumentation)
            eMessage.appendElement (WSDL_NS, "documentation").appendText ("Output part for method " + sMethodName);

          for (final Map.Entry <String, IWGType> aEntry : aMethod.getAllOutputs ().entrySet ())
          {
            final IWGType aType = aEntry.getValue ();
            final IMicroElement ePart = eMessage.appendElement (WSDL_NS, "part");
            ePart.setAttribute ("name", aEntry.getKey ());

            if (bIsDocumentLiteral)
              ePart.setAttribute ("element",
                                  PREFIX_TNS + ":" + XSDWriter.getElementName (sMethodName, aEntry.getKey (), EElementType.OUTPUT));
            else
              ePart.setAttribute ("type", _getTypeRef (aNSC, aType));
          }
        }

        if (aMethod.isFault ())
        {
          // A fault message may only contain one part
          for (final Map.Entry <String, IWGType> aEntry : aMethod.getAllFaults ().entrySet ())
          {
            final IMicroElement eMessage = eDefinitions.appendElement (WSDL_NS, "message");
            eMessage.setAttribute ("name", _getFaultName (sMethodName, aEntry.getKey ()));

            if (m_bCreateDocumentation)
              eMessage.appendElement (WSDL_NS, "documentation")
                      .appendText ("Fault part \"" + aEntry.getKey () + "\" for method " + sMethodName);

            final IWGType aType = aEntry.getValue ();
            final IMicroElement ePart = eMessage.appendElement (WSDL_NS, "part");
            ePart.setAttribute ("name", aEntry.getKey ());
            if (bIsDocumentLiteral)
              ePart.setAttribute ("element",
                                  PREFIX_TNS + ":" + XSDWriter.getElementName (sMethodName, aEntry.getKey (), EElementType.FAULT));
            else
              ePart.setAttribute ("type", _getTypeRef (aNSC, aType));
          }
        }
      }
    }

    // Create portType
    {
      String sWSAPrefix = m_aInterface.getNamespace ();
      if (!sWSAPrefix.endsWith ("/"))
        sWSAPrefix += "/";

      final IMicroElement ePortType = eDefinitions.appendElement (WSDL_NS, "portType");
      ePortType.setAttribute ("name", m_aInterface.getName () + "Port");

      if (m_bCreateDocumentation)
        ePortType.appendElement (WSDL_NS, "documentation").appendText ("SOAP portType " + m_aInterface.getName ());

      for (final WGMethod aMethod : m_aInterface.getAllMethods ())
      {
        final String sMethodName = aMethod.getName ();
        final IMicroElement eOperation = ePortType.appendElement (WSDL_NS, "operation");
        eOperation.setAttribute ("name", sMethodName);

        if (m_bCreateDocumentation)
          eOperation.appendElement (WSDL_NS, "documentation").appendText ("Assembled parts for method " + sMethodName);

        if (aMethod.isInput ())
        {
          // Reference input part
          final String sInputName = sMethodName + "Request";
          final IMicroElement eInput = eOperation.appendElement (WSDL_NS, "input");
          eInput.setAttribute ("message", PREFIX_TNS + ":" + sInputName);
          if (m_bCreateWSAddressing)
            eInput.setAttribute (WSA_NS, "Action", sWSAPrefix + sInputName);
        }
        if (aMethod.isOutput ())
        {
          // Reference output part
          final String sOutputName = sMethodName + "Response";
          final IMicroElement eOutput = eOperation.appendElement (WSDL_NS, "output");
          eOutput.setAttribute ("message", PREFIX_TNS + ":" + sOutputName);
          if (m_bCreateWSAddressing)
            eOutput.setAttribute (WSA_NS, "Action", sWSAPrefix + sOutputName);
        }
        if (aMethod.isFault ())
        {
          // Reference fault parts
          for (final Map.Entry <String, IWGType> aEntry : aMethod.getAllFaults ().entrySet ())
          {
            final String sFaultName = _getFaultName (sMethodName, aEntry.getKey ());
            final IMicroElement eFault = eOperation.appendElement (WSDL_NS, "fault");
            eFault.setAttribute ("message", PREFIX_TNS + ":" + sFaultName);
            eFault.setAttribute ("name", sFaultName);
            if (m_bCreateWSAddressing)
              eFault.setAttribute (WSA_NS, "Action", sWSAPrefix + sFaultName);
          }
        }
      }
    }

    // Create binding
    {
      final IMicroElement eBinding = eDefinitions.appendElement (WSDL_NS, "binding");
      eBinding.setAttribute ("name", m_aInterface.getName () + "Binding");
      eBinding.setAttribute ("type", PREFIX_TNS + ":" + m_aInterface.getName () + "Port");

      if (m_bCreateDocumentation)
        eBinding.appendElement (WSDL_NS, "documentation").appendText ("SOAP binding " + m_aInterface.getName ());

      final IMicroElement eSoapBinding = eBinding.appendElement (SOAP_NS, "binding");
      eSoapBinding.setAttribute ("style", sStyle);
      eSoapBinding.setAttribute ("transport", "http://schemas.xmlsoap.org/soap/http");

      for (final WGMethod aMethod : m_aInterface.getAllMethods ())
      {
        final String sMethodName = aMethod.getName ();
        final IMicroElement eOperation = eBinding.appendElement (WSDL_NS, "operation");
        eOperation.setAttribute ("name", sMethodName);

        if (m_bCreateDocumentation)
          eOperation.appendElement (WSDL_NS, "documentation").appendText ("SOAP binding for method " + sMethodName);

        final IMicroElement eSoapOperation = eOperation.appendElement (SOAP_NS, "operation");
        eSoapOperation.setAttribute ("soapAction", sMethodName);
        // Just for clarification
        eSoapOperation.setAttribute ("style", sStyle);

        final String sSoapBodyNamespace = m_aInterface.getNamespace () + "#" + sMethodName;

        if (aMethod.isInput ())
        {
          final IMicroElement eInput = eOperation.appendElement (WSDL_NS, "input");

          final IMicroElement eSoapBody = eInput.appendElement (SOAP_NS, "body");
          eSoapBody.setAttribute ("use", sUse);
          if (!bIsDocumentLiteral)
            eSoapBody.setAttribute ("namespace", sSoapBodyNamespace);
        }

        if (aMethod.isOutput ())
        {
          final IMicroElement eOutput = eOperation.appendElement (WSDL_NS, "output");

          final IMicroElement eSoapBody = eOutput.appendElement (SOAP_NS, "body");
          eSoapBody.setAttribute ("use", sUse);
          if (!bIsDocumentLiteral)
            eSoapBody.setAttribute ("namespace", sSoapBodyNamespace);
        }

        if (aMethod.isFault ())
        {
          // Each fault separately
          for (final Map.Entry <String, IWGType> aEntry : aMethod.getAllFaults ().entrySet ())
          {
            final IMicroElement eFault = eOperation.appendElement (WSDL_NS, "fault");
            eFault.setAttribute ("name", _getFaultName (sMethodName, aEntry.getKey ()));

            final IMicroElement eSoapFault = eFault.appendElement (SOAP_NS, "fault");
            eSoapFault.setAttribute ("use", sUse);
            if (!bIsDocumentLiteral)
              eSoapFault.setAttribute ("namespace", sSoapBodyNamespace);
            eSoapFault.setAttribute ("name", _getFaultName (sMethodName, aEntry.getKey ()));
          }
        }
      }
    }

    // Create service
    {
      final IMicroElement eService = eDefinitions.appendElement (WSDL_NS, "service");
      eService.setAttribute ("name", m_aInterface.getName () + "Service");

      if (m_bCreateDocumentation)
        eService.appendElement (WSDL_NS, "documentation").appendText ("SOAP service " + m_aInterface.getName ());

      final IMicroElement ePort = eService.appendElement (WSDL_NS, "port");
      ePort.setAttribute ("name", m_aInterface.getName () + "Port");
      ePort.setAttribute ("binding", PREFIX_TNS + ":" + m_aInterface.getName () + "Binding");

      final IMicroElement eSoapAddress = ePort.appendElement (SOAP_NS, "address");
      if (m_aInterface.hasEndpoint ())
        eSoapAddress.setAttribute ("location", m_aInterface.getEndpoint ());
      else
      {
        ePort.insertAtIndex (0, new MicroComment ("FIXME Dummy endpoint address - to be modified!"));
        eSoapAddress.setAttribute ("location", DEFAULT_ENDPOINT);
      }
    }

    final XMLWriterSettings aSettings = new XMLWriterSettings ();
    aSettings.setNamespaceContext (aNSC);
    aSettings.setPutNamespaceContextPrefixesInRoot (true);
    MicroWriter.writeToStream (aDoc, aOS, aSettings);
  }
}
